:toc: macro
toc::[]
:idprefix:
:idseparator: -
ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]

= devon4j Component Layers
As we already mentioned in the xref:devon4j-overview#devon4j-architecture-overview[introduction to devon4j] the components of our _Java_ back-end apps will be divided into three layers: `service`, `logic` and `dataaccess`.

* `service`: The layer that contains the REST services to exchange information with the client applications.

* `logic`: The layer hosting the logic of the application (validations, authorization control, business logic, etc.).

* `dataaccess`: The layer that communicates with the database.

== Layers Implementation
image::images/devon4j/5.Layers/dependency_injection.png[Dependency Injection, 250]

[NOTE]
====
If you haven't learned about *Dependency Injection* yet, please visit the https://github.com/devonfw/devon4j/wiki/guide-dependency-injection[devon4j guide to Dependency Injection]. Dependency Injection is an important principle in enterprise software development, that enables https://en.wikipedia.org/wiki/Separation_of_concerns[separation of concerns], decouples https://en.wikipedia.org/wiki/Application_programming_interface[interfaces] from their implementation and allows us to potentially https://en.wikipedia.org/wiki/Code_reuse[reuse code].
====

Following the https://github.com/devonfw/devon4j/wiki/guide-dependency-injection[devon4j recommendations] for _Dependency Injection_ in MyThaiStar's layers we will find:

* Separation of API and implementation: Inside each layer we will separate the elements in different packages: `api` and `impl`. The `api` will store the `interface` with the methods definition and inside the `impl` we will store the class that implements the `interface`:

image::images/devon4j/5.Layers/layer_api_impl.png[Layer API Implementation]

* Usage of https://jcp.org/en/jsr/detail?id=330[JSR330]: The Java standard set of annotations for _Dependency Injection_ (`@Named`, `@Inject`, `@PostConstruct`, `@PreDestroy`, etc.) provides us with all the needed annotations to define our beans and inject them:

```
@Named
public class MyBeanImpl implements MyBean {
  
  @Inject
  private MyOtherBean myOtherBean;

  @PostConstruct
  public void init() {
    // initialization if required (otherwise omit this method)
  }

  @PreDestroy
  public void dispose() {
    // shutdown bean, free resources if required (otherwise omit this method)
  }
}
```

=== Communication between Layers
The communication between layers is solved using the described _Dependency Injection_ pattern, based on _Spring_ and the _Java_ standards: `java.inject` (https://jcp.org/en/jsr/detail?id=330[JSR330]) combined with https://jcp.org/en/jsr/detail?id=250[JSR250].

image::images/devon4j/5.Layers/layers_impl.png[Layer Implementation]

==== Service Layer - Logic Layer
```
import javax.inject.Inject;
import javax.inject.Named;

import com.devonfw.application.mtsj.bookingmanagement.logic.api.Bookingmanagement;

@Named("BookingmanagementRestService")
public class BookingmanagementRestServiceImpl implements BookingmanagementRestService {

  @Inject
  private Bookingmanagement bookingmanagement;

  @Override
  public BookingCto getBooking(long id) {
    return this.bookingmanagement.findBooking(id);
  }

  ...

}
```

==== Logic Layer - Data Access Layer
```
import javax.inject.Inject;
import javax.inject.Named;
import javax.transaction.Transactional;

import com.devonfw.application.mtsj.bookingmanagement.dataaccess.api.repo.BookingRepository;

@Named
@Transactional
public class BookingmanagementImpl extends AbstractComponentFacade implements Bookingmanagement {

  @Inject
  private BookingRepository bookingDao;

  @Override
  public boolean deleteBooking(Long bookingId) {
   
    BookingEntity booking = this.bookingDao.find(bookingId);
    this.bookingDao.delete(booking);
    return true;
  }

  ...

}
```

=== Service Layer
As we mentioned at the beginning, the _service_ layer is where the services of our application (_REST_ or _SOAP_) will be located.

In _devon4j_ applications the default implementation for web services is based on http://cxf.apache.org/[Apache CXF], a services framework for Java apps that supports web service standards like _SOAP_ (implementing https://en.wikipedia.org/wiki/Java_API_for_XML_Web_Services[JAX-WS]) and _REST_ services (implementing https://en.wikipedia.org/wiki/Java_API_for_RESTful_Web_Services[JAX-RS]).

In this tutorial we are going to focus only on the _REST_ implementation of services.

==== Service Definition
The services definition is done by the _service interface_ located in the `service.api.rest` package. In the _booking_ component of MyThaiStar application we can see a service definition statement like the following:

```
@Path("/bookingmanagement/v1")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public interface BookingmanagementRestService {

  @GET
  @Path("/booking/{id}/")
  public BookingCto getBooking(@PathParam("id") long id);

  ...
}
```

*JAX-RS annotations:*

* *_@Path_*: Defines the common path for all the resources of the service.

* *_@Consumes_* and *_@Produces_*: Declares the type of data that the service expects to receive from the client and the type of data that will return to the client as a response.

* *_@GET_*: Annotation for the _HTTP GET_ method.

* *_@Path_*: The path definition for the `getBooking` resource.

* `*_@PathParam_*`: Annotation to configure the _id_ received in the _url_ as a parameter.

==== Service Implementation
The service implementation is a class located in the `service.impl.rest` package that implements the previous defined interface.

```
@Named("BookingmanagementRestService")
public class BookingmanagementRestServiceImpl implements BookingmanagementRestService {

  @Inject
  private Bookingmanagement bookingmanagement;

  @Override
  public BookingCto getBooking(long id) {

    return this.bookingmanagement.findBooking(id);
  }

  ...
}
```

As you can see, this layer simply delegates method-calls to the _logic_ layer, in order to resolve business logic requirements of the app.

=== Logic Layer
In this layer we store all the custom implementations we will need to fulfill the requirements of our application. Including:

* business logic
* delegation of the https://en.wikipedia.org/wiki/Business_transaction_management[transaction management] to Spring framework
* object mappings
* validations
* authorizations

Within the _logic_ layer we must avoid including code related to services or data access, we must delegate those tasks to the suitable layers.

==== Logic Layer Definition
As in the _service_ layer, the logic implementation will be defined by an interface located in a `logic.api` package.

```
public interface Bookingmanagement {

  BookingCto findBooking(Long id);
  ...
}
```

==== Logic Layer Implementation
In a `logic.impl` package an "_...Impl_" class will implement the interface defined in the previous section.

```
@Named
@Transactional
public class BookingmanagementImpl extends AbstractComponentFacade implements Bookingmanagement {

  // @see #getBookingDao()
  @Inject
  private BookingDao bookingDao;

  // The constructor.
  public BookingmanagementImpl() {

    super();
  }

  @Override
  public BookingCto findBooking(Long id) {

    BookingEntity entity = getBookingDao().findOne(id);
    BookingCto cto = new BookingCto();
    cto.setBooking(getBeanMapper().map(entity, BookingEto.class));
    cto.setOrder(getBeanMapper().map(entity.getOrder(), OrderEto.class));
    cto.setInvitedGuests(getBeanMapper().mapList(entity.getInvitedGuests(), InvitedGuestEto.class));
    cto.setOrders(getBeanMapper().mapList(entity.getOrders(), OrderEto.class));
    return cto;
  }

  public BookingDao getBookingDao() {
    return this.bookingDao;
  }

  ...
}
```

In the above _MyThaiStar_ logic layer example we can see:

* business logic and https://github.com/devonfw/devon4j/wiki/guide-beanmapping[object mappings]
* delegation of the transaction management through Spring's `@Transactional` annotation

=== Transfer Objects
In the code examples of the _logic_ layer section you may have seen a `BookingCto` object. This is one of the https://github.com/devonfw/devon4j/wiki/guide-transferobject[transfer objects] defined in _devon4j_. It is used to transfer data between the layers.

The main benefits of using _Transfer Objects_ are:

* Avoid inconsistent data (when entities are sent across the app, changes tend to occur in multiple places).
* Clearly define how much data to transfer (direct relations often lead to the transfer of too much data).
* Hide internal details.

In _devon4j_ we can find two different _Transfer Objects_ (TOs):

==== Entity Transfer Objects (ETOs)
* Have the same data-properties as their underlying entity.
* Hold no relations to other entities.
* Provide simple and solid mapping.

==== Composite Transfer Objects (CTOs)
* Have no data-properties at all.
* Only hold relations to other TOs.
* Either a 1:1 reference or a https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html[Collection] (https://docs.oracle.com/javase/tutorial/collections/interfaces/list.html[List]) of TOs.
* Are easy to map manually by reusing ETOs or other CTOs.

=== Data Access Layer
The third -- and last -- layer of the _devon4j_ architecture is the one responsible for storing all the code related to the connection and access of the database.

For mapping Java objects to the database, _devon4j_ use the _Java Persistence API_ (https://www.oracle.com/technetwork/java/javaee/tech/persistence-jsp-140049.html[JPA]). Explicitly, the JPA implementation _devon4j_ uses is http://hibernate.org/orm/[Hibernate].

Apart from the _Entities_ of components, we are going to find the same elements, that we saw in other layers, in the `dataaccess` layer: a definition (i.e. an `interface`) and an implementation (a class that implements that interface).

However, in this layer the implementation is slightly different: The `[Target]Repository` extends `com.devonfw.module.jpa.dataaccess.api.data.DefaultRepository`, which provides us with the basic `dataaccess` methods: `save(Entity)`, `findOne(id)`, `findAll(ids)`, `delete(id)`, etc.

Because of that, in the `[Target]Repository` implementation of the layer, we only need to add the _custom_ methods that are not implemented yet. Following the _MyThaiStar_ component example (_bookingmanagement_), we will only find the paginated `findBookings` implementation here:

```
import org.springframework.data.jpa.repository.Query;
import com.querydsl.jpa.impl.JPAQuery;

...

public interface BookingRepository extends DefaultRepository<BookingEntity> {

  @Query("SELECT booking FROM BookingEntity booking WHERE booking.bookingToken = :token")
  BookingEntity findBookingByToken(@Param("token") String token);

  default Page<BookingEntity> findBookings(BookingSearchCriteriaTo criteria) {

    BookingEntity alias = newDslAlias();
    JPAQuery<BookingEntity> query = newDslQuery(alias);
  
    ...
  }
}
```

The implementation of `findBookings` uses https://github.com/devonfw/devon4j/blob/develop/documentation/guide-repository.asciidoc[Spring Data] and http://www.querydsl.com/[QueryDSL] to manage dynamic queries.

=== Layers of the JumpTheQueue Application
The sections above describe the main elements of layers of the _devon4j_ components. If you have completed the exercise in the link:devon4j-components.asciidoc[previous chapter], you may have noticed that all those components are already created for us by _CobiGen_.

Take a look to our application structure:

*Visitor Component Core (without Relations)*

image::images/devon4j/5.Layers/jumpthequeue_structure_core.png[JumpTheQueue Core Structure, 350]

You'll see the following components:

. Definition for `dataaccess` layer repository.
. The entity that we created to be used by _CobiGen_ to generate the component structure.
. Definition of _abstract usecase_ in the `logic` layer.
. Implementation of the `usecasefind` layer in the `logic` layer.
. Implementation of the `usecasemanage` layer in the `logic` layer.
. Implementation of the `logic` layer.
. Implementation of the _rest service_.

*Visitor Component API (without Relations)*

image::images/devon4j/5.Layers/jumpthequeue_structure_api.png[JumpTheQueue API Structure, 350]

. definition for _entity_ in the `api` layer.
. Entity Transfer Object located in the `api` layer.
. Search Criteria Transfer Object located in the `api` layer.
. Definition of `usecasefind` in the `logic` layer.
. Definition of `usecasemanage` in the `logic` layer.
. Definition of the `logic` layer.
. Definition of the _rest service_ of the component.

The _queue_ component will have a similar structure. The _access code_ component will also have a similar structure -- with minor differences -- since it has some relations with visitor and queue.

*Access Code Component Core (with Relations)*

image::images/devon4j/5.Layers/jumpthequeue_structure_core_cto.png[JumpTheQueue Core Structure CTO, 350]

There is only a single difference in the core. If you look closely, you'll see that CobiGen didn't generate the _usecasemanage_ implementation. This is due to the complexity of entities with relations. In this case CobiGen will leave us to create the _save_ and _delete_ methods, so we can properly address them.

*Access Code Component API (with Relations)*

image::images/devon4j/5.Layers/jumpthequeue_structure_api_cto.png[JumpTheQueue API Structure CTO, 350]

There is _two_ differences here:

. As you can see, CobiGen generated a CTO for our entity with relations.
. As explained in the core, the _usecasemanage_ definition is missing.

So, as you can see, our components have all the layers defined and implemented following the _devon4j_ principles.

By using _CobiGen_ we have created a complete and functional _devon4j_ application without the necessity of any manual implementation (except for more complex entities which will be explained to the next chapter).

Now we'll run the application and try to use the REST service to save a new visitor:

=== JumpTheQueue Running
As already mentioned, in this tutorial we will be using https://www.getpostman.com/[Postman] to test our API.

First, open your _JumpTheQueue_ project in Eclipse and run the app (right-click `SpringBootApp.java > Run as > Java Application`.

==== Simple Call
If you remember, we added some xref:devon4j-components#mock-data[mock data] previously, to have some visitor info available. Let's try to retrieve a visitor's information by using our `visitormanagement service`.

Select the service *GET* and send: +
`http://localhost:8081/jumpthequeue/services/rest/visitormanagement/v1/visitor/1/`

We hope to obtain the data of the visitor with id `1`.

image::images/devon4j/5.Layers/jumpthequeue_simpeGet1.png[JumpTheQueue Simple GET Request 1]

Instead we get a response containing the login form. This is because _devon4j_ applications, by default, implement _Spring Security_. So we would need to login to access this service.

To make testing easier, we are going to "open" the application, to avoid the security filter, and we are going to enable the https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[CORS] filter to allow requests from (Angular-) clients.

First, in the file `/jtqj-core/pom.xml` we add the `devon4j-starter-security-cors` dependency:

```
    <dependency>
      <groupId>com.devonfw.java.starters</groupId>
      <artifactId>devon4j-starter-security-cors</artifactId>
    </dependency>
```

Second, in the file `/jtqj-core/src/main/resources/application.properties` set `security.cors.enabled` to true and configure other cors properties:

```
#CORS support
security.cors.enabled=true
security.cors.spring.allowCredentials=true
security.cors.spring.allowedOriginPatterns=*
security.cors.spring.allowedHeaders=*
security.cors.spring.allowedMethods=OPTIONS,HEAD,GET,PUT,POST,DELETE,PATCH
security.cors.pathPattern=/**
```

Finally in the file `general/service/impl/config/BaseWebSecurityConfig.java` edit the `configure()` method and remove the HTTP request filter. This will authorize every request and allow us access to the app:

```
@Override
public void configure(HttpSecurity http) throws Exception {

  http = this.webSecurityConfigurer.configure(http);

  http.authorizeRequests().anyRequest().permitAll().and().csrf().disable();
}
```

Now we run the app again and send the same GET request. We should now be able to obtain the data of our visitor:

image::images/devon4j/5.Layers/jumpthequeue_simpeGet2.png[JumpTheQueue Simple GET Request 2]

==== Paginated Response
_CobiGen_ has created a complete set of services for us, so we can access a paginated list of visitors without any extra implementation.

We are going to use the following service defined in `visitormanagement/service/api/rest/VisitormanagementRestService.java`:

```
	@Path("/visitor/search")
	@POST
	public Page<VisitorEto> findVisitors(VisitorSearchCriteriaTo searchCriteriaTo);
```

The service definition states, that we will need to provide a _Search Criteria Transfer Object_. This object will work as a filter for the search, as you can see in `visitormanagement/dataaccess/api/repo/VisitorRepository.java` in the `findByCriteria` method.

If the _Search Criteria Transfer Object_ is empty, we will retrieve all visitors. However, if we pass data with the object, the result will be filtered.

Select the service *POST* and enter: +
`http://localhost:8081/jumpthequeue/services/rest/visitormanagement/v1/visitor/search`

In the 'Body' tab, below the address bar, we'll have to define a `SearchCriteria` object, which will have a _pageable_ defined (make sure, the 'raw' option is selected):

```
{
	"pageable" : {
		"pageNumber" : "0",
		"pageSize": "10",
		"sort": []
	}
}
```

In the 'Headers' tab we'll have to ensure that `Content-Type` `application/json` is set, indicating to the server, that it'll have to interpret the body as JSON format (otherwise, you may face an 415 unsupported type error).

[NOTE]
====
You can see the definition of the `VisitorSearchCriteriaTo` in:
`visitormanagement/logic/api/to/VisitorSearchCriteriaTo.java`
====

The result will appear in the 'Headers' tab and look something like this:

image::images/devon4j/5.Layers/jumpthequeue_paginated1.png[JumpTheQueue Paginated Response 1]

If we want to filter the results, we can define a _criteria_ object in the body. Instead of the previously empty criteria, we now provide an object like this:

```
{
	"username": "test1@mail.com",
	"pageable" : {
		"pageNumber" : "0",
		"pageSize": "10",
		"sort": []
	}
}
```

This will filter the results to find only visitors with username `test1@mail.com`. If we repeat the request now, the result will be this:

image::images/devon4j/5.Layers/jumpthequeue_paginated2.png[JumpTheQueue Paginated Response 2]

We could customize this filter by editing the `visitormanagement/logic/impl/usecase/UcFindVisitorImpl.java` class.

==== Saving a Visitor
To meet the requirements of the xref:jump-the-queue-design#user-story-register[User Story: Register], we need to register a _visitor_ and return an _access code_.

By default _CobiGen_ has generated the _Read_ operation in the _UcFindEntityImpl_ for us, as well as the rest of the _CRUD_ operations in _UcManageEntityImpl_. So we are already able to _create_, _read_, _update_ and _delete_ visitors in our database, without any extra implementation required.

To delegate _Spring_ to manage _transactions_, we only have to add the `@Transactional` annotation to our _usecase_  implementations. Since _devonfw 2.2.0_ CobiGen adds this annotation automatically, so we don't have to do it manually. Check your logic implementation classes and add the annotation in case it's not present:

```
@Named
@Validated
@Transactional
public class UcManageVisitorImpl extends AbstractVisitorUc implements UcManageVisitor {
  ...
}
```

To save a visitor we only need to use the _REST_ resource `/services/rest/visitormanagement/v1/visitor` and provide the visitor definition for `VisitorEto` in the body.

[NOTE]
====
You can see the definition for `VisitorEto` in:
`visitormanagement/logic/api/to/VisitorEto.java`
====

Select the service *POST* and enter: +
`http://localhost:8081/jumpthequeue/services/rest/visitormanagement/v1/visitor`

Provide a _Visitor_ object in the body, such as this:

```
{
	"username": "mary@mail.com",
	"name": "Mary",
	"phoneNumber": "1234567",
	"password": "12345",
	"acceptedCommercial": "true",
	"acceptedTerms": "true",
	"userType": "false"
}
```

We will get the following result:

image::images/devon4j/5.Layers/jumpthequeue_saveVisitor.png[JumpTheQueue Save Visitor]

In the body of the response we can see the default content for a successful service response; the data of the new visitor. This is the default implementation when saving a new _entity_ with _devon4j_ applications. However, the _JumpTheQueue_ design defines, that the response must provide the _access code_ created for the user as well, so we will need to change the logic of our application to fit this requirement.

In the next chapter we will learn how to customize the code generated by _CobiGen_ to adapt it to our needs.

'''
*Next Chapter*: link:devon4j-adding-custom-functionality.asciidoc[Customizing a devon4j Project]
